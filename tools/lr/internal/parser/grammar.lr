// NOTE:
// - there's section separator between term and rule declaration.
// - line terminator ';' is optional
// - all language specific declaration are specified at the end of the file

// XXX: maybe add LEFT / RIGHT / NONASSOC?
%token TOKEN TYPE START // %<identifier>

// <identifier> followed by -> (ignoring whitespace and comment), tokenized as a
// single token by the lexer.  Equivalent to C_IDENTIFIER in yacc
%token <Token> RULE_DEF

// <identifier> followed by : (ignoring whitespace and comment), tokenized as
// a single token by the lexer.
%token <Token> LABEL

%token '<' '>' '|' ';' SECTION_MARKER
%token <Token> CHARACTER IDENTIFIER

%token <Token> SECTION_CONTENT

%type rword
%type <Tokens> nonempty_ident_list nonempty_id_or_char_list id_or_char_list

%type <Definition> def
%type <Definitions> defs

%type <Rule> rule

%type <Clause> clause
%type <Clauses> clauses

%type <AdditionalSection> additional_section
%type <AdditionalSections> additional_sections

%type <Grammar>  grammar

%start grammar

// NOTE: there's no tail and section separator, line terminator ';' is optional

grammar -> defs additional_sections

additional_sections ->
    add : additional_sections additional_section |
    nil :

additional_section -> SECTION_MARKER IDENTIFIER SECTION_CONTENT

defs ->
    add          : defs def |
    add_explicit : defs def ';' |
    def          : def |
    explicit_def : def ';'

// TODO: handle language specific boiler plate, union/struct
def ->
    // type / token declaration
    term_decl  : rword '<' IDENTIFIER '>' nonempty_id_or_char_list |
    untyped_term_decl  : rword nonempty_id_or_char_list |
    // start declaration
    start_decl : START nonempty_ident_list |
    rule       : rule

rword ->
    TOKEN |
    TYPE

nonempty_ident_list ->
    add   : nonempty_ident_list IDENTIFIER |
    ident : IDENTIFIER

nonempty_id_or_char_list ->
    add_id   : nonempty_id_or_char_list IDENTIFIER |
    add_char : nonempty_id_or_char_list CHARACTER |
    id       : IDENTIFIER |
    char     : CHARACTER

id_or_char_list ->
    list : nonempty_id_or_char_list |
    nil  :

rule -> RULE_DEF clauses

clause ->
  unlabeled: id_or_char_list |
  labeled: LABEL id_or_char_list

clauses ->
    add    : clauses '|' clause |
    clause : clause

%%lang_specs{
# The additional lang_specs section is specified in yaml
go:
    # This replaces yacc head section boilerplate
    # %{
    # package parser
    # %}
    package: parser

    # This replaces goyacc's -p option
    prefix: LR

    # This replaces %union{}
    value_types:
        Token:              "*Token"
        Tokens:             "[]*Token"
        Definition:         "Definition"
        Definitions:        "[]Definition"
        Rule:               "*Rule"
        Clause:             "*Clause"
        Clauses:            "[]*Clause"
        AdditionalSection:  "*AdditionalSection"
        AdditionalSections: "[]*AdditionalSection"
        Grammar:            "*Grammar"

    output_debug_non_kernel_items: true
java:
    some other yet to be determined spec, etc.
}%%
